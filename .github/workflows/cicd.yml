name: Deploy with IAM and Helm

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-cluster
  ECR_REPOSITORY: kubernetes
  COMBINED_FILE: app1.yaml
  NAMESPACE: apps

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    # --- SETUP ---
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # --- INSTALL REQUIRED TOOLS ---
    - name: Install AWS CLI and eksctl
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version
        
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    # --- AWS AUTHENTICATION ---
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # --- IAM SETUP FOR ALB CONTROLLER ---
    - name: Setup OIDC provider
      run: eksctl utils associate-iam-oidc-provider --cluster ${{ env.CLUSTER_NAME }} --approve

    - name: Download ALB IAM policy
      run: |
        curl -sLO https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json

    - name: Create ALB IAM policy
      run: |
        aws iam create-policy \
          --policy-name AWSLoadBalancerControllerIAMPolicy \
          --policy-document file://iam_policy.json || \
          echo "Policy already exists (continuing...)"

    - name: Create IAM service account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        eksctl create iamserviceaccount \
          --cluster=${{ env.CLUSTER_NAME }} \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy \
          --override-existing-serviceaccounts \
          --approve

    # --- KUBERNETES SETUP ---
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        kubectl get nodes  # Verify connection

    # --- INSTALL CERT-MANAGER ---
    - name: Install cert-manager
      run: |
        echo "Installing cert-manager..."
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml --validate=false
        
        echo "Waiting for cert-manager to be ready..."
        kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager
        kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager-webhook
        kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager-cainjector

    # --- INSTALL ALB CONTROLLER ---
    - name: Install AWS Load Balancer Controller
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=${{ env.CLUSTER_NAME }} \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=${{ env.AWS_REGION }}
        
        echo "Waiting for ALB Controller to be ready..."
        kubectl -n kube-system wait deployment/aws-load-balancer-controller --for=condition=Available --timeout=300s

    # --- IMAGE BUILD (APP1 ONLY) ---
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push App1 image
      run: |
        docker build -t app1 -f Dockerfile .
        docker tag app1 ${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}
        echo "APP1_IMAGE=${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}" >> $GITHUB_ENV

    # --- HELM SETUP ---
    - name: Install Helm
      uses: azure/setup-helm@v3

    # --- PRE-DEPLOYMENT CHECKS ---
    - name: Verify app1.yaml exists
      run: |
        if [ ! -f "app1.yaml" ]; then
          echo "::error::app1.yaml not found in repository root!"
          ls -la
          exit 1
        fi

        # Verify ALB Controller is ready
        kubectl -n kube-system get pods | grep aws-load-balancer-controller

    # --- DEPLOYMENT ---
    - name: Deploy applications
      run: |
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Update image in manifest
        sed -i "s|ECR_IMAGE_PLACEHOLDER|${{ env.APP1_IMAGE }}|g" app1.yaml
        
        # Apply resources
        kubectl apply -f app1.yaml -n ${{ env.NAMESPACE }}
        
        # Verify deployments
        kubectl rollout status deployment/app1 -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/app2 -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Wait for ALB provision (up to 5 minutes)
        echo "Waiting for ALB to be provisioned..."
        for i in {1..30}; do
          INGRESS_HOST=$(kubectl get ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
          [ -n "$INGRESS_HOST" ] && break
          sleep 10
          echo "Attempt $i/30: ALB not yet provisioned..."
        done
        
        if [ -z "$INGRESS_HOST" ]; then
          echo "::error::ALB not provisioned after 5 minutes"
          echo "Debugging information:"
          kubectl get ingress -n ${{ env.NAMESPACE }} -o yaml
          kubectl describe ingress -n ${{ env.NAMESPACE }}
          kubectl logs -n kube-system deployment/aws-load-balancer-controller
          exit 1
        fi
        
        echo "ALB successfully provisioned:"
        echo "http://$INGRESS_HOST"