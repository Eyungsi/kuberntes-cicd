name: Deploy with IAM and Helm

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-cluster
  ECR_REPOSITORY: kubernetes
  COMBINED_FILE: all-in-one.yaml
  NAMESPACE: apps

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC auth
      contents: read   # Required for checkout
    
    steps:
    # --- SETUP ---
    - name: Checkout code
      uses: actions/checkout@v3

    # --- AWS AUTHENTICATION ---
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_IAM_ROLE }}  # Optional: Use if assuming a role

    # --- IAM SETUP FOR ALB CONTROLLER ---
    - name: Setup OIDC provider
      run: |
        eksctl utils associate-iam-oidc-provider \
          --region ${{ env.AWS_REGION }} \
          --cluster ${{ env.CLUSTER_NAME }} \
          --approve

    - name: Download ALB IAM policy
      run: |
        curl -o iam_policy.json \
          https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json

    - name: Create ALB IAM policy
      run: |
        aws iam create-policy \
          --policy-name AWSLoadBalancerControllerIAMPolicy \
          --policy-document file://iam_policy.json || \
          echo "Policy already exists"

    - name: Create IAM service account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        eksctl create iamserviceaccount \
          --cluster=${{ env.CLUSTER_NAME }} \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy \
          --override-existing-serviceaccounts \
          --region ${{ env.AWS_REGION }} \
          --approve

    # --- IMAGE BUILD (APP1 ONLY) ---
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push App1 image
      run: |
        docker build -t app1 -f Dockerfile.app1 .
        docker tag app1 ${{ steps.login-ecr.outputs.registry }}/app1:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/app1:${{ github.sha }}
        echo "APP1_IMAGE=${{ steps.login-ecr.outputs.registry }}/app1:${{ github.sha }}" >> $GITHUB_ENV

    # --- HELM SETUP ---
    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Add EKS Helm repo
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

    - name: Install ALB Controller
      run: |
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          --namespace kube-system \
          --set clusterName=${{ env.CLUSTER_NAME }} \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller

    # --- DEPLOYMENT ---
    - name: Create namespace
      run: kubectl create namespace ${{ env.NAMESPACE }} || true

    - name: Deploy applications
      run: |
        # Replace image placeholder
        sed -i "s|ECR_IMAGE_PLACEHOLDER|${{ env.APP1_IMAGE }}|g" ${{ env.COMBINED_FILE }}
        
        # Apply all resources
        kubectl apply -f ${{ env.COMBINED_FILE }} -n ${{ env.NAMESPACE }}
        
        # Verify
        kubectl rollout status deployment/app1 -n ${{ env.NAMESPACE }}
        kubectl rollout status deployment/app2 -n ${{ env.NAMESPACE }}
        echo "App1 LB URL:"
        kubectl get svc app1-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'