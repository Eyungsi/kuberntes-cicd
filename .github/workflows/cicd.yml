name: Deploy with IAM and Helm

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-cluster
  ECR_REPOSITORY: kubernetes
  COMBINED_FILE: ${{ github.workspace }}/app1.yaml  # Updated with absolute path
  NAMESPACE: apps

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    # --- SETUP ---
    - name: Checkout code
      uses: actions/checkout@v3

    # --- INSTALL REQUIRED TOOLS ---
    - name: Install AWS CLI and eksctl
      run: |
        # Install/Update AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version
        
        # Install eksctl
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version
        
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    # --- AWS AUTHENTICATION ---
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # --- IAM SETUP FOR ALB CONTROLLER ---
    - name: Setup OIDC provider
      run: eksctl utils associate-iam-oidc-provider --cluster ${{ env.CLUSTER_NAME }} --approve

    - name: Download ALB IAM policy
      run: |
        curl -sLO https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json

    - name: Create ALB IAM policy
      run: |
        aws iam create-policy \
          --policy-name AWSLoadBalancerControllerIAMPolicy \
          --policy-document file://iam_policy.json || \
          echo "Policy already exists (continuing...)"

    - name: Create IAM service account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        eksctl create iamserviceaccount \
          --cluster=${{ env.CLUSTER_NAME }} \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy \
          --override-existing-serviceaccounts \
          --approve

    # --- IMAGE BUILD (APP1 ONLY) ---
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push App1 image
      run: |
        docker build -t app1 -f ${{ github.workspace }}/Dockerfile .
        docker tag app1 ${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}
        echo "APP1_IMAGE=${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}" >> $GITHUB_ENV

    # --- KUBERNETES SETUP ---
    - name: Configure kubectl
      run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    # --- HELM SETUP ---
    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Add EKS Helm repo
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

    # --- DEPLOYMENT ---
    - name: Deploy applications
      run: |
        # Replace image placeholder
        sed -i "s|ECR_IMAGE_PLACEHOLDER|${{ env.APP1_IMAGE }}|g" ${{ env.COMBINED_FILE }}
        
        # Apply all resources
        kubectl apply -f ${{ env.COMBINED_FILE }} -n ${{ env.NAMESPACE }}
        
        # Verify
        kubectl rollout status deployment/app1 -n ${{ env.NAMESPACE }}
        kubectl rollout status deployment/app2 -n ${{ env.NAMESPACE }}
        echo "App1 LB URL:"
        kubectl get svc app1-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'