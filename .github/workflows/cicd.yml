name: Deploy with IAM and Helm

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-cluster
  ECR_REPOSITORY: kubernetes
  COMBINED_FILE: app1.yaml
  NAMESPACE: apps

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    # --- SETUP ---
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # --- AWS AUTHENTICATION ---
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # --- INFRASTRUCTURE SETUP ---
    - name: Setup infrastructure
      run: |
        chmod +x ./install.sh
        ./install.sh ${{ env.CLUSTER_NAME }} ${{ env.AWS_REGION }}
    # --- IMAGE BUILD ---
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push App1 image
      run: |
        docker build -t app1 -f Dockerfile .
        docker tag app1 ${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}
        echo "APP1_IMAGE=${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}" >> $GITHUB_ENV
    # --- DEPLOYMENT ---
    - name: Deploy applications
      run: |
        # Verify files exist
        if [ ! -f "app1.yaml" ]; then
          echo "::error::app1.yaml not found!"
          ls -la
          exit 1
        fi
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Update and apply manifests
        sed -i "s|ECR_IMAGE_PLACEHOLDER|${{ env.APP1_IMAGE }}|g" app1.yaml
        kubectl apply -f app1.yaml -n ${{ env.NAMESPACE }}
        
        # Verify deployments
        kubectl rollout status deployment/app1 -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/app2 -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Wait for ALB
        echo "Waiting for ALB provision..."
        timeout 300 bash -c 'until kubectl get ingress -n $0 -o jsonpath="{.items[0].status.loadBalancer.ingress[0].hostname}"; do sleep 10; done' ${{ env.NAMESPACE }}
