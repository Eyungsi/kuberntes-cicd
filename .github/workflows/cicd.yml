name: Build, Scan, and Deploy with IAM and Helm

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-cluster
  ECR_REPOSITORY: kubernetes
  COMBINED_FILE: app1.yaml
  NAMESPACE: apps

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy filesystem scan (SAST)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL'

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      id: build-image
      run: |
        docker build -t app1 -f Dockerfile .
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/kubernetes:${{ github.sha }}"
        docker tag app1 $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        
        # Set output for deployment job
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_URI }}'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Push Docker image to ECR
      run: |
        docker push ${{ env.IMAGE_URI }}
    
    # Pass image URI to deployment job
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup infrastructure
      run: |
        chmod +x ./install.sh
        ./install.sh ${{ env.CLUSTER_NAME }} ${{ env.AWS_REGION }}

    - name: Set image from build job
      run: |
        echo "APP1_IMAGE=${{ needs.build.outputs.image_uri }}" >> $GITHUB_ENV
        echo "Using image: ${{ needs.build.outputs.image_uri }}"

    - name: Deploy applications
      run: |
        # Debug: show files and environment
        echo "=== Current directory ==="
        ls -la
        echo "=== Environment variables ==="
        printenv | grep -E 'APP1_IMAGE|NAMESPACE'
        echo "============================="
        
        # Verify files exist
        if [ ! -f "app1.yaml" ]; then
          echo "::error::app1.yaml not found!"
          exit 1
        fi
        
        # Verify placeholder exists
        echo "=== Checking for placeholder in app1.yaml ==="
        if ! grep -q "ECR_IMAGE_PLACEHOLDER" app1.yaml; then
          echo "::error::Placeholder 'ECR_IMAGE_PLACEHOLDER' not found in app1.yaml"
          echo "File contents:"
          cat app1.yaml
          exit 1
        fi
        
        # Replace placeholder
        echo "Replacing placeholder with: $APP1_IMAGE"
        sed -i "s|ECR_IMAGE_PLACEHOLDER|$APP1_IMAGE|g" app1.yaml
        
        # Show modified deployment
        echo "=== Modified deployment manifest ==="
        grep -A 5 -B 5 "image:" app1.yaml
        echo "===================================="
        
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply configuration
        kubectl apply -f app1.yaml -n ${{ env.NAMESPACE }}
        
        # Verify deployments
        kubectl rollout status deployment/app1 -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/app2 -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Wait for ALB
        echo "Waiting for ALB provision..."
        timeout 300 bash -c 'until kubectl get ingress -n $0 -o jsonpath="{.items[0].status.loadBalancer.ingress[0].hostname}"; do sleep 10; done' ${{ env.NAMESPACE }}